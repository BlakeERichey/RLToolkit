from .utils import clean_noisy_results
class BaseDispatcher:

  "Base Abstract Class for Backends"


  def __init__(self,):
    """
      Initializes Backend and starts tasks queues
    """
    pass
  
  def shutdown(self,):
    """
      shutdowns resources utilized by subprocesses and reinitializes backend
      for continued use.
    """
    raise NotImplementedError

  def run(self, func, *args, timeout=None, **kwargs):
    """
      Places a task into the servers queued tasks for client completion.

      # Returns 
      The associated task id to recover the results.
    """
    raise NotImplementedError
  
  def get_results(self, task_ids=[], 
                  values_only=True, numeric_only=False, ref_value='min'):
    """
      Gets a number of results from the results queue. Defaults to 1 result
      Hangs current thread until this quantity has been retreived.


      task_ids: task_ids as generated by self.run(). These are used by the 
        server to identify which task to return the results for.
      values_only: if False returns dictionary that includes the task ids with its 
        results. Otherwise, returns the values computed in order of the 
        requested task ids.
      numeric_only: if True, adjusts non numeric results to a `ref_value` 
        numeric value of the results, as determine by the `ref_valuue` parameter.
      ref_value: One of ['min', 'minimum', 'max', 'maximum'] adjusts non 
        numeric results to the reference value. `numeric_only` must be True, 
        or this parameter is overlooked.
    """
    raise NotImplementedError
  
  def _clean_results(self, results, values_only=True, numeric_only=False, ref_value='min'):
    """
      Utility function for cleaning noisy results, in place, caused by 
      crashed subprocesses.

      # Arguments  
      results: if `values_only`=True, expects list. If `values_only`=False, 
        expects dict with {'task_id': result}.
      values_only: if True, function expects results as a list. 
      numeric_only: if True, adjusts non numeric results to a `ref_value` 
        numeric value of the results, as determine by the `ref_valuue` parameter.
      ref_value: One of ['min', 'minimum', 'max', 'maximum'] adjusts non 
        numeric results to the reference value. `numeric_only` must be True, 
        or this parameter is overlooked.
    """
    if numeric_only:
      if values_only:
        clean_noisy_results(results, reference=ref_value)
      else:
        temp_results = list(results.values())
        clean_noisy_results(temp_results, reference=ref_value)
        for i, key in enumerate(results.keys()):
          results[key] = temp_results[i]
    
    return results